AWSTemplateFormatVersion: '2010-09-09'
Description: test
Transform:
- AWS::Serverless-2016-10-31
Parameters:
  Env:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - test
    - pro
    Description: Run environment.
  UserTableName:
    Type: String
    Default: user-simple-table-dev
    AllowedValues:
    - user-simple-table-dev
    - user-simple-table-test
    - user-simple-table-pro
    Description: DynamoDB table by run environment.
Globals:
  Function:
    Handler: app.handler
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 100
Resources:
  MyNewHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName:
        Ref: Env
  MyOtherNewApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Ref: Env
  putNewUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: putNewUser
      Description: HTTP POST method to add one user to a DynamoDB user table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserSimpleTable
      Layers:
      - Ref: UserBusinessLogicLayer
      Environment:
        Variables:
          USER_TABLE:
            Ref: UserSimpleTable
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /user
            Method: post
            RestApiId:
              Ref: MyOtherNewApi
  getAllUsers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getAllUsers
      Description: HTTP GET method to get all users from a DynamoDB user table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserSimpleTable
      Layers:
      - Ref: UserBusinessLogicLayer
      Environment:
        Variables:
          USER_TABLE:
            Ref: UserSimpleTable
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: MyNewHttpApi
            Method: GET
            Path: /user
  getUserById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getUserById
      Description: HTTP GET method to get user by id from a DynamoDB user table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserSimpleTable
      Layers:
      - Ref: UserBusinessLogicLayer
      Environment:
        Variables:
          USER_TABLE:
            Ref: UserSimpleTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyOtherNewApi
            Method: GET
            Path: /user/{id}
  updateExistingUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: updateExistingUser
      Description: HTTP POST method to add one user to a DynamoDB user table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserSimpleTable
      Layers:
      - Ref: UserBusinessLogicLayer
      Environment:
        Variables:
          USER_TABLE:
            Ref: UserSimpleTable
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /user/{id}
            Method: put
            RestApiId:
              Ref: MyOtherNewApi
  UserBusinessLogicLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ..\..\BusinessLogicLayer\UserBusinessLogic
      CompatibleRuntimes:
      - nodejs12.x
  UserSimpleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Ref: UserTableName
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for dev stage
    Value:
      Fn::Sub: https://${MyOtherNewApi}.execute-api.${AWS::Region}.amazonaws.com/dev/
  WebHttpEndpoint:
    Description: API Gateway endpoint URL for dev stage
    Value:
      Fn::Sub: https://${MyNewHttpApi}.execute-api.${AWS::Region}.amazonaws.com/dev/
